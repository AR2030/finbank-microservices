spring:
  application:
    name: "gatewayserver"
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              enabled: false
              lowerCaseServiceId: true
          httpclient:
            connect-timeout: 1000
            response-timeout: 10s

  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 2s
      timeout: 1s

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:7070/realms/master/protocol/openid-connect/certs"
      client:
#        registration:
#          finbankauth:
#            client-id: gatewayserver
#            client-secret: secret
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#            scope: openid, profile, email
#        provider:
#          finbankauth:
#            authorization-uri: http://localhost:8085/oauth2/authorize
#            token-uri: http://localhost:8085/oauth2/token
#            user-info-uri: http://localhost:8085/userinfo
#            jwk-set-uri: http://localhost:8085/.well-known/jwks.json
#            user-name-attribute: sub

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
        access: unrestricted
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10000

server:
  port: 8072

info:
  app:
    name: "gatewayserver"
    description: "FinBank API Gateway Server"
    version: "4.0.0"
logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
